import { useState } from 'react'
import ImageLoader from './ImageLoader'

type CarouselItem = {
  type: 'original' | 'ai_video'
  image_path?: string | null
  image_url?: string | null
  video_path?: string | null
  video_url?: string | null
  created_by?: string | null
  style?: string | null
}

type VideoCarouselProps = {
  items: CarouselItem[]
  className?: string
  onPreviewImage?: (src: string) => void
}

export default function VideoCarousel({ items, className = '', onPreviewImage }: VideoCarouselProps) {
  const [currentIndex, setCurrentIndex] = useState(0)

  if (!items || items.length === 0) return null

  const normalizePath = (path?: string | null) => {
    if (!path) return ''
    if (path.startsWith('http')) return path
    if (path.startsWith('/uploads')) return path
    return path.startsWith('uploads') ? `/${path}` : `/uploads/${path}`
  }

  const goToSlide = (index: number) => {
    if (index >= 0 && index < items.length) {
      setCurrentIndex(index)
    }
  }

  const nextSlide = () => {
    setCurrentIndex((prev) => (prev + 1) % items.length)
  }

  const prevSlide = () => {
    setCurrentIndex((prev) => (prev - 1 + items.length) % items.length)
  }

  const currentItem = items[currentIndex]

  return (
    <div className={`relative ${className}`}>
      {/* Main Content Container */}
      <div className="relative rounded-xl border border-white/10 bg-black max-h-[520px] overflow-hidden">
        {currentItem.type === 'original' && currentItem.image_url && (
          <ImageLoader
            src={currentItem.image_url}
            alt="Original photo"
            className="block w-full max-h-[520px] object-contain cursor-zoom-in"
            onClick={() => onPreviewImage && onPreviewImage(currentItem.image_url!)}
          />
        )}

        {currentItem.type === 'ai_video' && (currentItem.video_path || currentItem.video_url) && (
          <div className="relative">
            {/* Generated by tag */}
            {currentItem.created_by && (
              <div className="absolute top-2 left-2 z-10 px-2 py-1 rounded-md bg-black/70 backdrop-blur-sm border border-white/20 text-xs text-white flex items-center gap-1">
                <i className="fa-solid fa-wand-magic-sparkles text-[#4db6ac]" />
                <span>Generated by</span>
                <span className="font-semibold text-[#4db6ac]\">@{currentItem.created_by}</span>
              </div>
            )}

            <video
              src={currentItem.video_url || normalizePath(currentItem.video_path)}
              className="w-full max-h-[520px] object-contain bg-black"
              controls
              playsInline
              onLoadedData={() => console.log('[Carousel] Video loaded')}
            />
          </div>
        )}
      </div>

      {/* Navigation */}
      {items.length > 1 && (
        <>
          {/* Dots */}
          <div className="flex justify-center gap-2 mt-3">
            {items.map((_, index) => (
              <button
                key={index}
                onClick={() => goToSlide(index)}
                className={`w-2 h-2 rounded-full transition-all ${
                  index === currentIndex ? 'bg-[#4db6ac] w-6' : 'bg-white/40 hover:bg-white/60'
                }`}
              />
            ))}
          </div>

          {/* Arrows */}
          <button
            onClick={prevSlide}
            className="absolute left-2 top-1/2 transform -translate-y-1/2 w-10 h-10 rounded-full bg-black/50 hover:bg-black/70 text-white flex items-center justify-center"
          >
            <i className="fa-solid fa-chevron-left" />
          </button>
          <button
            onClick={nextSlide}
            className="absolute right-2 top-1/2 transform -translate-y-1/2 w-10 h-10 rounded-full bg-black/50 hover:bg-black/70 text-white flex items-center justify-center"
          >
            <i className="fa-solid fa-chevron-right" />
          </button>

          {/* Counter */}
          <div className="absolute top-2 right-2 px-2 py-1 rounded-md bg-black/70 text-xs text-white">
            {currentIndex + 1} / {items.length}
          </div>
        </>
      )}
    </div>
  )
}
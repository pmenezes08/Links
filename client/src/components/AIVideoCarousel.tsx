import React, { useState, useRef, useEffect, useCallback, useMemo } from 'react'

interface AIVideo {
  video_path: string
  generated_by: string
  created_at: string
  style: string
}

interface AIVideoCarouselProps {
  originalImage?: string | null
  aiVideos: AIVideo[]
  onImageClick?: (src: string) => void
  className?: string
}

export default function AIVideoCarousel({ originalImage, aiVideos, onImageClick, className = '' }: AIVideoCarouselProps) {
  const [currentIndex, setCurrentIndex] = useState(0)
  const [isDragging, setIsDragging] = useState(false)
  const [startX, setStartX] = useState(0)
  const carouselRef = useRef<HTMLDivElement>(null)
  const videoRefs = useRef<(HTMLVideoElement | null)[]>([])

  // Combine original image with AI videos
  const allItems = useMemo(() => [
    ...(originalImage ? [{ type: 'image' as const, src: originalImage, generated_by: null, created_at: null, style: null }] : []),
    ...aiVideos.map(video => ({ type: 'video' as const, ...video }))
  ], [originalImage, aiVideos])

  const normalizePath = (p?: string | null): string => {
    const s = (p || '').trim()
    if (!s) return ''
    if (s.startsWith('http')) return s
    if (s.startsWith('/uploads') || s.startsWith('/static')) return s
    if (s.startsWith('uploads') || s.startsWith('static')) return `/${s}`
    return `/uploads/${s}`
  }

  const handlePrevious = useCallback(() => {
    setCurrentIndex(prev => prev > 0 ? prev - 1 : allItems.length - 1)
  }, [allItems.length])

  const handleNext = useCallback(() => {
    setCurrentIndex(prev => prev < allItems.length - 1 ? prev + 1 : 0)
  }, [allItems.length])

  const handleDotClick = useCallback((index: number) => {
    setCurrentIndex(index)
  }, [])

  // Touch/swipe handling
  const handleTouchStart = useCallback((e: React.TouchEvent) => {
    setIsDragging(true)
    setStartX(e.touches[0].clientX)
  }, [])

  const handleTouchMove = useCallback((e: React.TouchEvent) => {
    if (!isDragging) return
    e.preventDefault()
    const currentX = e.touches[0].clientX
    const diff = startX - currentX
    if (Math.abs(diff) > 50) {
      if (diff > 0) {
        handleNext()
      } else {
        handlePrevious()
      }
      setIsDragging(false)
    }
  }, [isDragging, startX, handleNext, handlePrevious])

  const handleTouchEnd = useCallback(() => {
    setIsDragging(false)
  }, [])

  // Pause videos when not active
  useEffect(() => {
    videoRefs.current.forEach((video, index) => {
      if (video) {
        if (index === currentIndex && allItems[index]?.type === 'video') {
          video.play().catch(() => {}) // Ignore autoplay errors
        } else {
          video.pause()
        }
      }
    })
  }, [currentIndex, allItems])

  // Auto-play current video on index change
  useEffect(() => {
    const currentVideo = videoRefs.current[currentIndex]
    if (currentVideo && allItems[currentIndex]?.type === 'video') {
      currentVideo.play().catch(() => {}) // Ignore autoplay errors
    }
  }, [currentIndex, allItems])

  if (allItems.length === 0) return null

  return (
    <div className={`relative ${className}`}>
      {/* Main carousel container */}
      <div
        ref={carouselRef}
        className="relative overflow-hidden rounded border border-white/10 bg-black"
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
      >
        <div
          className="flex transition-transform duration-300 ease-in-out"
          style={{ transform: `translateX(-${currentIndex * 100}%)` }}
        >
          {allItems.map((item, index) => (
            <div key={index} className="flex-shrink-0 w-full relative">
              {item.type === 'image' ? (
                <div className="relative">
                  <img
                    src={normalizePath(item.src)}
                    alt="Original post image"
                    className="block mx-auto max-w-full max-h-[520px] cursor-zoom-in"
                    onClick={() => onImageClick?.(normalizePath(item.src))}
                    loading="lazy"
                  />
                </div>
              ) : (
                <div className="relative">
                  {/* User attribution overlay */}
                  <div className="absolute top-2 left-2 z-10 bg-black/70 backdrop-blur-sm px-2 py-1 rounded-full text-xs text-white flex items-center gap-1">
                    <i className="fa-solid fa-wand-magic-sparkles text-[#4db6ac]" />
                    <span>generated by @{item.generated_by}</span>
                  </div>

                  <video
                    ref={el => { videoRefs.current[index] = el }}
                    src={normalizePath(item.video_path)}
                    className="block mx-auto max-w-full max-h-[520px] bg-black"
                    controls
                    playsInline
                    preload="metadata"
                    muted // Start muted to allow autoplay
                  />
                </div>
              )}
            </div>
          ))}
        </div>

        {/* Navigation arrows */}
        {allItems.length > 1 && (
          <>
            <button
              onClick={handlePrevious}
              className="absolute left-2 top-1/2 -translate-y-1/2 w-8 h-8 rounded-full bg-black/50 hover:bg-black/70 text-white flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"
              aria-label="Previous"
            >
              <i className="fa-solid fa-chevron-left text-sm" />
            </button>
            <button
              onClick={handleNext}
              className="absolute right-2 top-1/2 -translate-y-1/2 w-8 h-8 rounded-full bg-black/50 hover:bg-black/70 text-white flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"
              aria-label="Next"
            >
              <i className="fa-solid fa-chevron-right text-sm" />
            </button>
          </>
        )}
      </div>

      {/* Dot indicators */}
      {allItems.length > 1 && (
        <div className="flex justify-center gap-2 mt-3">
          {allItems.map((_, index) => (
            <button
              key={index}
              onClick={() => handleDotClick(index)}
              className={`w-2 h-2 rounded-full transition-colors ${
                index === currentIndex
                  ? 'bg-[#4db6ac]'
                  : 'bg-white/30 hover:bg-white/50'
              }`}
              aria-label={`Go to slide ${index + 1}`}
            />
          ))}
        </div>
      )}
    </div>
  )
}